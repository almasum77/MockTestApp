@inherits LayoutComponentBase
@layout MasterInit
@inject IJSRuntime JS
@inject UserInfoContextService _userContext
@inject NavigationManager Navigation
@inject AuthService _authService


@using Layout._Helpers
@using Layout.Partials.HeaderLayout
@using Starterkit.Models
@using Starterkit.Shared.Partials
@using Starterkit.Utilities

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<!--begin::App-->
<div class="d-flex flex-column flex-root app-root" id="kt_app_root">
	<!--begin::Page-->
	<div class="app-page flex-column flex-column-fluid" id="kt_app_page">
		<_Header></_Header>
		<!--begin::Wrapper-->
		<div class="app-wrapper flex-column flex-row-fluid" id="kt_app_wrapper">
			<!--begin::Main-->
			<div class="app-main flex-column flex-row-fluid" id="kt_app_main">
				<!--begin::Content wrapper-->
				<div class="d-flex flex-column flex-column-fluid">
					@* <_Toolbar></_Toolbar>
					<!--begin::Content-->
                    <div id="kt_app_content" class="app-content flex-column-fluid">
                        <!--begin::Content container-->
                        <div id="kt_app_content_container" class="app-container container-xxl">
                            @Body
                        </div>
                        <!--end::Content container-->
                    </div>
                    <!--end::Content--> *@

					@Body



				</div>
				<!--end::Content wrapper-->
				<_Footer></_Footer>
			</div>
			<!--end:::Main-->
		</div>
		<!--end::Wrapper-->
	</div>
	<!--end::Page-->
</div>
<!--end::App-->

<_Drawers></_Drawers>
<_ModalComponents></_ModalComponents>
<_Scrolltop></_Scrolltop>

@code {
    private IKTThemeHelpers KTHelper = default!;

    protected override void OnInitialized()
    {
        KTHelper = new KTThemeHelpers(JS);
        KTHelper.addBodyAttribute("data-kt-app-page-loading", "on");


    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            KTHelper.addBodyAttribute("data-kt-app-reset-transition", "true");

            KTHelper.addBodyAttribute("data-kt-app-layout", "light-header");
            KTHelper.addBodyAttribute("data-kt-app-header-fixed", "true");
            KTHelper.addBodyAttribute("data-kt-app-toolbar-enabled", "true");

            KTHelper.addBodyClass("app-default");

            JS.InvokeVoidAsync("KTModalUpgradePlan.init");
            JS.InvokeVoidAsync("KTCreateApp.init");
            JS.InvokeVoidAsync("KTModalUserSearch.init");
            JS.InvokeVoidAsync("KTModalNewTarget.init");
            JS.InvokeVoidAsync("KTAppSidebar.init");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(300);
        await JS.InvokeVoidAsync("document.body.removeAttribute", "data-kt-app-reset-transition");
        await JS.InvokeVoidAsync("document.body.removeAttribute", "data-kt-app-page-loading");

        if (_userContext.userInfo == null)
        {
            // Attempt to retrieve the token from localStorage
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                // If a token exists, set it in CommonConstants and load the current user
                CommonConstants.AuthToken = token;

                await _authService.LoadCurrentUser();

                if (_userContext.userInfo == null)
                {
                    // If loading user info fails, redirect to sign-in
                    Navigation.NavigateTo("/signin");
                }
            }
            else
            {
                // No token means redirect to the sign-in page
                Navigation.NavigateTo("/signin");
            }
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if user information is already loaded
        
    }



}