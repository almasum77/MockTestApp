@page "/test_index"
@layout Layout.DefaultLightHeader;

@using Starterkit.Models.Question
@using Starterkit.Models.Test
@using Starterkit.Services
@using Starterkit.Component

@inject TestService _testService

<MudThemeProvider></MudThemeProvider>
<TestDetails @ref=testDetailsModal></TestDetails>

<style>
	.mud-table-cell {
		font-size: 1rem;
	}
</style>

<!--begin::Toolbar-->
<div id="kt_app_toolbar" class="app-toolbar py-3 py-lg-6">
	<!--begin::Toolbar container-->
	<div id="kt_app_toolbar_container" class="app-container container-xxl d-flex flex-stack">
		<!--begin::Page title-->
		<div class="page-title d-flex flex-column justify-content-center flex-wrap me-3">
			<!--begin::Title-->
			<h1 class="page-heading d-flex text-gray-900 fw-bold fs-3 flex-column justify-content-center my-0">Previous Test List</h1>
			<!--end::Title-->
			<!--begin::Breadcrumb-->
			<ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0 pt-1">
				<!--begin::Item-->
				<li class="breadcrumb-item text-muted">
					<a href="?page=index" class="text-muted text-hover-primary">Home</a>
				</li>
				<!--end::Item-->
				<!--begin::Item-->
				<li class="breadcrumb-item">
					<span class="bullet bg-gray-500 w-5px h-2px"></span>
				</li>
				<!--end::Item-->
				<!--begin::Item-->
				<li class="breadcrumb-item text-muted">Test List</li>
				<!--end::Item-->
			</ul>
			<!--end::Breadcrumb-->
		</div>
		<!--end::Page title-->
		<!--begin::Actions-->
		<div class="d-flex align-items-center gap-2 gap-lg-3">
			<!--begin::Secondary button-->
			@* <a href="#" class="btn btn-sm fw-bold bg-body btn-color-gray-700 btn-active-color-primary" data-bs-toggle="modal" data-bs-target="#kt_modal_create_app">Rollover</a> *@
			<!--end::Secondary button-->
			<!--begin::Primary button-->
			@* <button class="btn btn-sm fw-bold btn-primary" @onclick="()=>TestDetail.Open()">Add Question</button> *@
			<!--end::Primary button-->
		</div>
		<!--end::Actions-->
	</div>
	<!--end::Toolbar container-->
</div>
<!--end::Toolbar-->
<!--begin::Content-->
<div id="kt_app_content" class="app-content flex-column-fluid">
	<!--begin::Content container-->
	<div id="kt_app_content_container" class="app-container container-xxl">
		<MudTable T="TestSummary" Items="@testSummaries" Dense="true" Hover="true" Bordered="false" Striped="false" Filter="new Func<TestSummary,bool>(FilterFunc1)" >
			<ToolBarContent>
				<MudText Typo="Typo.h6">Periodic Elements</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"></MudTextField>
			</ToolBarContent>
			<HeaderContent>
				<MudTh>Test No</MudTh>
				<MudTh>Test Date</MudTh>
				<MudTh>File Name</MudTh>
				<MudTh>Correct Answers</MudTh>
				<MudTh>Total Quesitons</MudTh>
				<MudTh>Action</MudTh>
				
			</HeaderContent>
			<RowTemplate>
				<MudTd Class="mud-table-cell" DataLabel="testno">@context.testno</MudTd>
				<MudTd Class="mud-table-cell" DataLabel="Siquestiontextgn">@context.testdate</MudTd>
				<MudTd Class="mud-table-cell" DataLabel="fileid">@context.filename</MudTd>
				<MudTd Class="mud-table-cell" DataLabel="fileid">@context.correctanswers</MudTd>
				<MudTd Class="mud-table-cell" DataLabel="fileid">@context.totalquestions</MudTd>
				<MudTd Class="mud-table-cell" DataLabel="fileid">
					<MudTooltip Text="Details of test">
						<MudIconButton Icon="@Icons.Material.Filled.Assessment" Color="Color.Primary" aria-label="Check" OnClick="() =>testDetailsModal.Open(context.testid)"></MudIconButton>
					</MudTooltip>
					

				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	</div>
	<!--end::Content container-->
</div>
<!--end::Content-->
@code {

	public string searchString { get; set; }
	public TestDetails testDetailsModal { get; set; }

	private List<TestSummary> testSummaries = new List<TestSummary>();
	private TestSummary testSummary = new TestSummary();

	protected override async Task OnInitializedAsync()
	{
		testSummaries = await _testService.GetTestSummariesAsync();
	}




	#region question datatable
	private bool FilterFunc1(TestSummary element) => FilterFunc(element, searchString);

	private bool FilterFunc(TestSummary element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.testno != null && element.testno.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.testdate != null && element.testdate.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{element.totalquestions}".Contains(searchString))
			return true;
		return false;
	}
	#endregion
}
