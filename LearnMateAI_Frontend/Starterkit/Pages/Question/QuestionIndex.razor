@* @page "/question_list" *@
@page "/"

@layout Layout.DefaultLightHeader;

@using Starterkit.Models.Question
@using Starterkit.Services
@using Starterkit.Component

@inject QuestionService _questionService

<MudThemeProvider></MudThemeProvider>
<AddQuestionModal @ref="addQuestionModal" OnSubmit="AddQuestionModalAction"></AddQuestionModal>
<FileWiseQuestionsModal @ref="fileWiseQuestions"></FileWiseQuestionsModal>
<AddTestModal @ref="addTestModal"></AddTestModal>

<!--begin::Toolbar-->
<div id="kt_app_toolbar" class="app-toolbar py-3 py-lg-6">
	<!--begin::Toolbar container-->
	<div id="kt_app_toolbar_container" class="app-container container-xxl d-flex flex-stack">
		<!--begin::Page title-->
		<div class="page-title d-flex flex-column justify-content-center flex-wrap me-3">
			<!--begin::Title-->
			<h1 class="page-heading d-flex text-gray-900 fw-bold fs-3 flex-column justify-content-center my-0">Question List</h1>
			<!--end::Title-->
			<!--begin::Breadcrumb-->
			<ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0 pt-1">
				<!--begin::Item-->
				<li class="breadcrumb-item text-muted">
					<a href="?page=index" class="text-muted text-hover-primary">Home</a>
				</li>
				<!--end::Item-->
				<!--begin::Item-->
				<li class="breadcrumb-item">
					<span class="bullet bg-gray-500 w-5px h-2px"></span>
				</li>
				<!--end::Item-->
				<!--begin::Item-->
				<li class="breadcrumb-item text-muted">Question List</li>
				<!--end::Item-->
			</ul>
			<!--end::Breadcrumb-->
		</div>
		<!--end::Page title-->
		<!--begin::Actions-->
		<div class="d-flex align-items-center gap-2 gap-lg-3">
			<!--begin::Secondary button-->
			@* <a href="#" class="btn btn-sm fw-bold bg-body btn-color-gray-700 btn-active-color-primary" data-bs-toggle="modal" data-bs-target="#kt_modal_create_app">Rollover</a> *@
			<!--end::Secondary button-->
			<!--begin::Primary button-->
			<button class="btn btn-sm fw-bold btn-primary" @onclick="()=>addQuestionModal.Open()">Add Question</button>
			<!--end::Primary button-->
		</div>
		<!--end::Actions-->
	</div>
	<!--end::Toolbar container-->
</div>
<!--end::Toolbar-->
<!--begin::Content-->
<div id="kt_app_content" class="app-content flex-column-fluid">
	<!--begin::Content container-->
	<div id="kt_app_content_container" class="app-container container-xxl">
		<MudTable Items="@fileSummaries" Dense="true" Hover="true" Bordered="false" Striped="false" Filter="new Func<FileQuestionSummary,bool>(FilterFunc1)">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Periodic Elements</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
			</ToolBarContent>
			<HeaderContent>
				<MudTh>File name</MudTh>
				<MudTh>Number of quesiton</MudTh>
				<MudTh>File upload date</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="questiontype">@context.original_filename</MudTd>
				<MudTd DataLabel="Siquestiontextgn">@context.number_of_questions</MudTd>
				<MudTd DataLabel="fileid">@context.uploaddate</MudTd>
				<MudTd DataLabel="fileid">
					<MudTooltip Text="Open Questions">
						<MudIconButton Icon="@Icons.Material.Filled.Details" Color="Color.Primary" aria-label="Check" OnClick="() =>fileWiseQuestions.Open(context.file_id)"></MudIconButton>
					</MudTooltip>
					<MudTooltip Text="Take Test">
						<MudIconButton Icon="@Icons.Material.Filled.QuestionAnswer" Color="Color.Primary" aria-label="Take Test" OnClick="() =>addTestModal.Open(context.file_id)"></MudIconButton>
					</MudTooltip>
					<MudTooltip Text="Delete">
						<MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
					</MudTooltip>
					
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	</div>
	<!--end::Content container-->
</div>
<!--end::Content-->
@code {
	AddQuestionModal addQuestionModal { get; set; }

	FileWiseQuestionsModal fileWiseQuestions { get; set; }
	AddTestModal addTestModal { get; set; }

	public string  searchString { get; set; }
	private List<FileQuestionSummary> fileSummaries = new();

	protected override async Task OnInitializedAsync()
	{
		fileSummaries = await _questionService.GetFileQuestionSummariesAsync();
		fileSummaries = fileSummaries.OrderByDescending(s => s.uploaddate).ToList();
	}

	public async Task AddQuestionModalAction()
	{
		string msg = "Successfull";
	}



	#region question datatable
	private bool FilterFunc1(FileQuestionSummary element) => FilterFunc(element, searchString);

	private bool FilterFunc(FileQuestionSummary element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.original_filename.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.uploaddate.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{element.file_id}".Contains(searchString))
			return true;
		return false;
	}
	#endregion
}
