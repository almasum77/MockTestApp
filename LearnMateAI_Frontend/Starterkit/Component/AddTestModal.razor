@page "/test"
@using Starterkit.Models.Question
@using Starterkit.Models.Test
@using Starterkit.Services
@inject QuestionService _questionService
@inject TestService _testService
@inject IJSRuntime JS


	<!--begin::Modal - New Target-->
<div class="modal fade" id="kt_modal_add_test" tabindex="-1" aria-hidden="true">
    <!--begin::Modal dialog-->
    <div class="modal-dialog modal-fullscreen">
        <!--begin::Modal content-->
        <div class="modal-content rounded">
            <!--begin::Modal header-->
            <div class="modal-header border-0 justify-content-end">
                <div class="btn btn-sm btn-icon btn-light-danger" data-bs-dismiss="modal" @onclick="Close">
                    <span class="svg-icon svg-icon-1">
                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                        <!--end::Svg Icon-->
                    </span>
                </div>
            </div>
            <!--end::Modal header-->
            <!--begin::Modal body-->
            <div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
                @if (questions != null)
                {
                    <div class="text-center mb-13">
                        <h1 class="mb-3">Start The Test</h1>
                        <div class="text-muted fw-semibold fs-5">
                            
                        </div>
                    </div>
                    <!--begin::File Info-->
                    <div class="mb-8">
                        <h4 class="fw-bold">File: @fileQuestionSummary.original_filename</h4>
@*                         <p class="text-muted">Uploaded on: @fileQuestionSummary.uploaddate</p>
 *@                        <p class="text-muted">Total Questions: @fileQuestionSummary.number_of_questions</p>
                    </div>
                    <!--end::File Info-->
                    <!--begin::File Content Display-->
                    <div class="mb-13">
                        <h3 class="fw-bold">@fileQuestionSummary.original_filename</h3>
                        <div class="text-muted  fs-4 fw-normal lh-lg">@fileContent</div>
                    </div>
                    <!--end::File Content Display-->
                    <!--begin::Questions Form-->
                    <h4 class="fw-bold mb-4">Answer the following questions:</h4>
                    <EditForm Model="@userAnswers" OnValidSubmit="HandleSubmit">
                        @for (int i = 0; i < questions.Count; i++)
                        {
                            var userAnswer = userAnswers.FirstOrDefault(u => u.question_id == Convert.ToInt32(questions[i].question_id));
                            string answerValue = userAnswer?.answer ?? string.Empty;

                            <div class="mb-5">
                                <p class="fw-bold">@($"{i + 1}. {questions[i].question}")</p>

                                @if (questions[i].question_type == "TrueFalse")
                                {
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" @onchange="() => OnRadioChanged(userAnswer, true)" />
                                        <label class="form-check-label">True</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" @onchange="() => OnRadioChanged(userAnswer, false)" />
                                        <label class="form-check-label">False</label>
                                    </div>
                                }
                                else if (questions[i].question_type == "FillInTheBlanks")
                                {
                                    <div class="input-group">
                                        <InputText class="form-control" @bind-Value="@userAnswer.answer" />
                                    </div>
                                }
                            </div>
                        }

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </EditForm>
                    <!--end::Questions Form-->
                    @if (results != null)
                    {
                        <!--begin::Results-->
                        <div class="mt-10">
                            <h4 class="fw-bold">Results:</h4>
                            <p class="text-normal">Score: @results.Score/@results.TotalQuestions</p>
                            <p class="text-muted">Correct Answers: @results.CorrectAnswers</p>
                        </div>
                        <!--end::Results-->
                    }
                }
                else
                {
                    <p class="text-center text-muted">Loading...</p>
                }
            </div>
            <!--end::Modal body-->
        </div>
        <!--end::Modal content-->
    </div>
    <!--end::Modal dialog-->
</div>

	<!--end::Modal - New Target-->




@code {

    public int fileId { get; set; }  // Receive fileId as a parameter

    private List<QuestionAnswerPairNew> questions;
    private List<UserAnswerSubmission> userAnswers;
    private TestResult results;
    private string quesitonType= string.Empty;

    private string fileContent;
    private FileQuestionSummary fileQuestionSummary;

    // protected override async Task OnInitializedAsync()
    // {

    // }

    public async Task Open(int fileId)
    {
        this.fileId = fileId;
        questions = await _questionService.GetQuestionsForFileAsyncForTest(fileId);
        quesitonType = questions.Select(s => s.question_type).First();

        // Fetch file content
        fileContent = await _questionService.GetFileContentAsync(fileId);
        // Fetch the file summary and questions from the service
        fileQuestionSummary = await _questionService.GetFileQuestionSummaryAsync(fileId);

        // Initialize userAnswers with the correct number of items
        userAnswers = new List<UserAnswerSubmission>();
        foreach (var question in questions)
        {
            userAnswers.Add(new UserAnswerSubmission { question_id = Convert.ToInt32(question.question_id) });
        }

        await JS.InvokeVoidAsync("showModal", "kt_modal_add_test");
        StateHasChanged();
    }

    public async Task Close()
    {
        await JS.InvokeVoidAsync("hideModal", "kt_modal_add_testy");
        // results = new TestResult();

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        // Calculate score on the frontend
        int score = 0;

        // Loop through each question and match with the corresponding user answer by question_id
        foreach (var question in questions)
        {
            var userAnswer = userAnswers.FirstOrDefault(u => u.question_id == Convert.ToInt32( question.question_id));
            if (userAnswer != null && question.answer.Equals(userAnswer.answer, StringComparison.OrdinalIgnoreCase))
            {
                score++;
            }
        }

        results = new TestResult
        {
                Score = score,
                TotalQuestions = questions.Count,
                CorrectAnswers = score
        };

        // Send the result and user's answers to the backend for storage
        var success = await _testService.SaveTestAndAnswersAsync(fileId, results, quesitonType, userAnswers);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Test results and answers saved successfully.");
            await Close();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to save test results and answers.");
        }

        StateHasChanged();
    }

    private void OnRadioChanged(UserAnswerSubmission obj, bool value)
    {
        if (value)
        {
            obj.answer = "True";
        }
        else if (value == false)
        {
            obj.answer = "False";
        }
    }




}
