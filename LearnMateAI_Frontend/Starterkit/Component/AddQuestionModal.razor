@using Starterkit.Models
@using Starterkit.Models.Question
@using Starterkit.Services
@using Starterkit.Shared.Partials.General
@using Starterkit._keenthemes.libs
@using Blazored.Toast

@inject IJSRuntime JS
@inject QuestionService _questionService
@inject Blazored.Toast.Services.IToastService ToastService


	<!--begin::Modal - New Target-->
<div class="modal fade" id="kt_modal_new_target" tabindex="-1" aria-hidden="true">
    <!--begin::Modal dialog-->
    <div class="modal-dialog modal-fullscreen">
        <!--begin::Modal content-->
        <div class="modal-content rounded">
            <!--begin::Modal header-->
            <div class="modal-header border-0">
                <h5 class="modal-title">Generate Questions</h5>
                <div class="btn btn-sm btn-icon btn-light-danger" data-bs-dismiss="modal">
                    <span class="svg-icon svg-icon-1">
                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                        <!--end::Svg Icon-->
                    </span>
                </div>
            </div>
            <!--end::Modal header-->
            <!--begin::Modal body-->
            <div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
                <form id="kt_modal_generate_questions_form" class="form">
                    <!--begin::Input group-->
                    <div class="row mb-10">
                        <!-- File Input Column -->
                        <div class="col-lg-4 mb-5">
                            <label class="form-label fs-6 fw-bold">Select a File</label>
                            <div class="input-group">
                                <InputFile OnChange="OnFileChange" class="form-control" />
                            </div>
                        </div>

                        <!-- Number of Questions Column -->
                        <div class="col-lg-4 mb-5">
                            <label class="form-label fs-6 fw-bold">Number of Questions</label>
                            <input type="number" class="form-control form-control-solid" @bind="questionSize" />
                        </div>

                        <!-- Question Type Column -->
                        <div class="col-lg-4 mb-5">
                            <label class="form-label fs-6 fw-bold">Question Type</label>
                            <div class="input-group">
                                <MudSelect T="string" @bind-Value="selectedQuestionType" Label="Select Question Type" Variant="Variant.Filled" Class="form-control">
                                    <MudSelectItem Value="@("FillInTheBlanks")">Fill in the Blanks</MudSelectItem>
                                    <MudSelectItem Value="@("TrueFalse")">True/False</MudSelectItem>
                                </MudSelect>
                            </div>
                        </div>


                        <!-- Question Type Column -->
                        @* <div class="col-lg-4 mb-5">
                            <MudSelect T="string" @bind-Value="selectedQuestionType" Label="Select Question Type" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@("FillInTheBlanks")" >Fill in the Blanks</MudSelectItem>
                                <MudSelectItem Value="@("TrueFalse")" >True/False</MudSelectItem>
                            </MudSelect>
                        </div> *@
                    </div>

                    <div class="text-center">
                        <button type="button" class="btn btn-light me-3" @onclick="Close">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="HandleSubmit">
                            <span class="indicator-label">Generate</span>
                        </button>
                    </div>


                    <!--end::Input group-->

                </form>

                <!--begin::Generated Questions-->
                @if (questionAnswerPairs?.Count > 0)
                {
                    <div class="mt-10">
                        <h4 class="fw-bold">Generated Questions</h4>
                        <ol class="list-group list-group-numbered">
                            @foreach (var qa in questionAnswerPairs)
                            {
                                <li class="list-group-item">
                                    <div>@qa.question</div>
                                    
                                </li>
                            }
                        </ol>
                        <h4 class="fw-bold mt-10">Correct Answers</h4>
                        <ul class="list-group">
                            @{
                                var i = 1;
                            }
                            @foreach (var qa in questionAnswerPairs)
                            {
                                <li class="list-group-item">@i. Correct Answer: @qa.answer</li>
                                i++;
                            }
                        </ul>
                        <div class="text-center mt-10">
                            <button @onclick="SaveQuestionsAndAnswers" class="btn btn-primary">Save Questions and Answers</button>
                        </div>
                    </div>
                }
                <!--end::Generated Questions-->
            </div>
            <!--end::Modal body-->
        </div>
        <!--end::Modal content-->
    </div>
    <!--end::Modal dialog-->
</div>

	<!--end::Modal - New Target-->


@code {
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    private string? selectedFile;
    private int questionSize = 10;
    private List<string> questionTypes = new List<string>();
    private List<QuestionAnswerPair> questionAnswerPairs = new List<QuestionAnswerPair>();
    private bool isLoading = false;
    private string sessionId;
    private string fileId;
    private string selectedQuestionType;

    public async Task Open()
    {
        
        await JS.InvokeVoidAsync("showModal", "kt_modal_new_target");
        // questionAnswerPairs.Clear();
        
        StateHasChanged();
    }

    public async Task OnInitialisedAsync()
    {

    }

    public async Task Close()
    {
        await JS.InvokeVoidAsync("showModal", "kt_modal_new_target");

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        isLoading = true;

        if (_selectedFile != null)
        {
            HandleQuestionTypeChange();
            using var stream = _selectedFile.OpenReadStream(); // Get the file stream
            var fileName = _selectedFile.Name; // Get the actual file name

            var response = await _questionService.GenerateQuestionsAsync(stream, fileName, questionSize, questionTypes);
            if (response != null)
            {
                fileId = response.file_id.ToString();
                sessionId = response.session_id;
                questionAnswerPairs = response.question_answer_pairs.Where(s => s.answer != null).ToList();
                
            }
            else
            {
            }
        }

        isLoading = false;
        StateHasChanged();
    }

    private IBrowserFile _selectedFile;

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File; // Store the selected file
    }


    private async Task SaveQuestionsAndAnswers()
    {
        var success = await _questionService.SaveQuestionsAndAnswersAsync(questionAnswerPairs, Convert.ToInt32(fileId));
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Questions and answers saved successfully.");
            await OnSubmit.InvokeAsync(true);
            await Close();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to save questions and answers.");
        }
    }

    private void HandleQuestionTypeChange()
    {
        if (!string.IsNullOrEmpty(selectedQuestionType))
        {
            // Split the string into a list of strings
            questionTypes = selectedQuestionType.Split(',').ToList();
        }
        else
        {
            questionTypes.Clear();
        }
    }
}
