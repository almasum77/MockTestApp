@using Starterkit.Models
@using Starterkit.Models.Question
@using Starterkit.Services
@using Starterkit.Shared.Partials.General
@using Starterkit._keenthemes.libs
@using Starterkit.Utilities
@inject IJSRuntime JS
@inject QuestionService _questionService

<!--begin::Modal - File Wise Questions-->
<div class="modal fade" id="kt_modal_file_questions" tabindex="-1" aria-hidden="true">
    <!--begin::Modal dialog-->
    <div class="modal-dialog modal-fullscreen">
        <!--begin::Modal content-->
        <div class="modal-content rounded">
            <!--begin::Modal header-->
            <div class="modal-header border-0 justify-content-end">
                <button class="btn btn-sm btn-icon btn-light-danger" data-bs-dismiss="modal" aria-label="Close">
                    <span class="svg-icon svg-icon-2x">
                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                        <!--end::Svg Icon-->
                    </span>
                </button>
            </div>
            <!--end::Modal header-->
            <!--begin::Modal body-->
            <div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
                <div class="text-center mb-13">
                    <h1 class="mb-3">File wise Questions</h1>
                    <div class="text-muted fw-semibold fs-5">
                        Review questions for the selected file
                    </div>
                </div>

                @if (fileQuestionSummary != null)
                {
                    <!--begin::File Info-->
                    <div class="mb-8">
                        <h4 class="fw-bold">File: @fileQuestionSummary.original_filename</h4>
                        <p class="text-muted">Uploaded on: @fileQuestionSummary.uploaddate</p>
                        <p class="text-muted">Total Questions: @fileQuestionSummary.number_of_questions</p>
                    </div>
                    <!--end::File Info-->
                    <!--begin::File Content Display-->
                    <div class="mb-13">
                        <h3 class="fw-bold">@fileQuestionSummary.original_filename</h3>
                        <div class="text-muted fs-4 fw-normal lh-lg">@fileContent</div>

                    </div>
                    <!--end::File Content Display-->
                    <!--begin::Questions List-->
                    <div class="mb-8">
                        <h4 class="fw-bold">Questions</h4>
                        <ul class="list-group list-group-flush">
                            @{
                                var i = 1;
                            }
                            @foreach (var question in questions)
                            {
                                <li class="list-group-item">
                                    <span>@i. </span>
                                    @if (question.question_type == CommonConstants.QuestionType.TrueFalse.ToString())
                                    {
                                        <span class="badge bg-light ms-2 mx-1">True/False</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-primary ms-2 mx-1"></span>
                                    }
                                    <span class="fw-bold">@question.question</span>
                                    <span>Ans: @question.answer</span>
                                </li>

                                i++;
                            }
                        </ul>
                    </div>
                    <!--end::Questions List-->
                }
                else
                {
                    <p class="text-muted text-center">No questions available for this file.</p>
                }

                <!--begin::Actions-->
                <div class="text-center mt-10">
                    <button class="btn btn-light me-3" @onclick="Close">Close</button>
                </div>
                <!--end::Actions-->
            </div>
            <!--end::Modal body-->
        </div>
        <!--end::Modal content-->
    </div>
    <!--end::Modal dialog-->
</div>

<!--end::Modal - File Wise Questions-->
@code {
    [Parameter]
    public int FileId { get; set; }

    private string fileContent;
    private FileQuestionSummary fileQuestionSummary;
    private List<QuestionAnswerPair> questions = new List<QuestionAnswerPair>();

    protected override async Task OnInitializedAsync()
    {
        if (FileId != 0)
        {
            await LoadFileQuestions();
        }
    }

    private async Task LoadFileQuestions()
    {
        // Fetch file content
        fileContent = await _questionService.GetFileContentAsync(FileId);
        // Fetch the file summary and questions from the service
        fileQuestionSummary = await _questionService.GetFileQuestionSummaryAsync(FileId);

        if (fileQuestionSummary != null)
        {
            questions = await _questionService.GetQuestionsForFileAsync(FileId);
        }
    }

    public async Task Open(int fileId)
    {
        FileId = fileId;
        await LoadFileQuestions();

        await JS.InvokeVoidAsync("showModal", "kt_modal_file_questions");
        StateHasChanged();
    }

    public async Task Close()
    {
        await JS.InvokeVoidAsync("hideModal", "kt_modal_file_questions");
        StateHasChanged();
    }
}



}

